

fhog.m
  gradientMag.m
    gradientMex('gradientMag', ...)  
      mGradMag()
        // (Forrest untangled gradMag in gradientMex_simplified.m)
        // gradMag just produces magnitude and orientation, not in HOG Cell Bins.
        gradMag() //output: float* M (magnitude), float* O (orientation) 
          acosTable()
          grad1() // has a lot of for loops without braces ... fixing line breaks might mess up logic (be careful) 

    //
    gradientMex('gradientMagNorm', ...)
      mGradMagNorm()
        gradMagNorm()

  gradientHist.m
    gradientMex('gradientHist', ...)
      mGradHist()
        fhog() //in gradientMex.cpp, not fhog.m
          gradHist()
            gradQuantize()
          hogNormMatrix()

in gradientMag.cpp, these are unused:
    mGrad2()
      grad2()
  

If we *don't* use the Matlab interface, we can use these functions in graduentMag.cpp:
[None?]
(is there a usable non-matlab interface, or do I roll this myself?)
  I think I just call the same sequence of things in C++ that I would do in fhog.m, and skip the mGradMag() and mGradHist() steps.


GENERAL QUESTIONS:
- inputs and outputs of gradMag, gradMagNorm, and gradHist?
- breakdown of perf among gradMag, gradMagNorm, and gradHist?
- what's convTri()? (it happens after gradMag, but before gradMagNorm)
    convolution with a triangle filter. (why do we use a triangle filter?)
- How do I use the C/C++ interface?
    //I think this (roughly) would work:
    //TODO: malloc
    float* I = img //what type?
    float* O = malloc... //orientations
    float* M = malloc... //magnitudes

    //@input: I = img
    //@output: O = orientations; M = magnitudes    
    gradMag(I, O, M, ...)
   
    S = convTri(M, normRad);

    //@input: M = magnitudes, S = (binned orientations?)
    //@output: (updated M and/or S?)
    gradMagNorm(M, S, ...)

    //we don't use 'S' from here on in... (at least in fhog.m)

    float* H = malloc... //final HOG hist

    //@input M = magnitudes, O = orientations (what data layout? these are binned now, right?)
    //@output H = final hog histogram
    gradientHist(M, O, H, ...);
    
     
 
- does the C/C++ interface give the same result?
    can hack this C++ interface into a version of the FFLD HOG code,
    plus a transpose to get the right output dimension order

PERF QUESTIONS:
- how fast is imResample? (compared to Ross's imresize)
- is the C/C++ interface any faster?
- where might be a good place in the Piotr's code to switch to 'depth as inner dim' data layout?


